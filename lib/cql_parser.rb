#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
class CQLParser < Racc::Parser

module_eval(<<'...end cql_parser.y/module_eval...', 'cql_parser.y', 57)

def parse(str)
  @str = str.strip

  do_parse()
end

def next_token
  if @str.size > 0
    case @str
    when /^\d+(\.\d+)?/
      ret = [:NUMBER, $&]
    when /^[+-]/
      ret = [:PLUSMIN, $&]
    when /^[*\/]/
      ret = [:MULDIV, $&]
    when /^and\b/i
      ret = [:AND, $&]
    when /^or\b/i
      ret = [:OR, $&]
    when /^(not\s+)?in\b/i
      ret = [:IN, $&]
    when /^(true|false)\b/i
      ret = [:BOOLEAN, $&]
    when /^(><|<>|!=)/
      ret = [:CMP, "!="]
    when /^(<=|>=|=|<|>)/
      ret = [:CMP, $&]
    when /^"([^"]+)"/
      ret =[:STRING, $1]
    when /^[a-zA-Z_][a-zA-Z_0-9]*/
      ret = [:IDENTIFIER, $&]
    when /^[(,)]/
      ret = [$&, $&]
    else
      raise "Unrecognised symbol in string: #{@str.inspect}"
    end
    @str = $'
    @str.lstrip!
  else
    ret = [false, '$end']
  end
  return ret
end

def to_func(name)
  name.sub!(/\s+/, '_')
  name = name.downcase.to_sym
  if CQL::Procedures.instance_methods.include?(name)
    name
  else
    raise TypeError.new("Unknown procedure '#{name}'. GOT: '#{CQL::Procedures.instance_methods}'")
  end
end

def on_error(token_id, error_value, value_stack)
  raise TypeError.new("Unexpected '#{error_value}' after '#{value_stack.reverse[0..5].reverse}'")
end
...end cql_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    22,    21,    19,    20,     5,    26,     8,    13,    12,
    14,    15,    24,     5,    22,     8,    13,    12,    14,    15,
    25,     5,    37,     8,    13,    12,    14,    15,    16,     5,
   nil,     8,    13,    12,    14,    15,   nil,     5,   nil,     8,
    13,    12,    14,    15,   nil,     5,   nil,     8,    13,    12,
    14,    15,   nil,     5,   nil,     8,    13,    12,    14,    15,
   nil,     5,   nil,     8,    13,    12,    14,    15,   nil,     5,
   nil,     8,    13,    12,    14,    15,   nil,     5,   nil,     8,
   nil,    12,    14,    15,    22,    21,    19,    20,    18,    17,
    22,    21,   -25,    36,    22,    21,    19,    20,    18,    17,
   nil,    33,    22,    21,    19,    20,    18,    17,    22,    21,
    19,    20,    18,    22,    21,    19,   -25 ]

racc_action_check = [
     0,    28,    28,    28,    28,     0,    16,     0,    36,     0,
     0,     0,     8,    36,    31,    36,    24,    36,    36,    36,
    13,    24,    35,    24,     5,    24,    24,    24,     1,     5,
   nil,     5,    22,     5,     5,     5,   nil,    22,   nil,    22,
    19,    22,    22,    22,   nil,    19,   nil,    19,    20,    19,
    19,    19,   nil,    20,   nil,    20,    17,    20,    20,    20,
   nil,    17,   nil,    17,    18,    17,    17,    17,   nil,    18,
   nil,    18,    21,    18,    18,    18,   nil,    21,   nil,    21,
   nil,    21,    21,    21,    34,    34,    34,    34,    34,    34,
    29,    29,    29,    34,    23,    23,    23,    23,    23,    23,
   nil,    23,     2,     2,     2,     2,     2,     2,    27,    27,
    27,    27,    27,    30,    30,    30,    30 ]

racc_action_pointer = [
    -3,    28,   100,   nil,   nil,    21,   nil,   nil,     4,   nil,
   nil,   nil,   nil,     7,   nil,   nil,     6,    53,    61,    37,
    45,    69,    29,    92,    13,   nil,   nil,   106,    -1,    88,
   111,    12,   nil,   nil,    82,    13,     5,   nil,   nil ]

racc_action_default = [
    -2,   -25,    -1,    -3,    -4,   -25,    -6,    -7,   -18,   -17,
   -19,   -20,   -21,   -25,   -23,   -24,   -25,   -25,   -25,   -25,
   -25,   -25,   -25,   -25,   -25,   -22,    39,    -8,    -9,   -10,
   -11,   -12,   -13,    -5,   -16,   -25,   -25,   -14,   -15 ]

racc_goto_table = [
     2,    35,     1,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38,   nil,   nil,   nil,    27,    28,    29,
    30,    31,    32 ]

racc_goto_check = [
     2,     7,     1,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     7,   nil,   nil,   nil,     2,     2,     2,
     2,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,   nil,   nil,   nil,   -23,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,    34,     3,     4,     6,     7,   nil,     9,    10,
    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_none,
  0, 16, :_reduce_2,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  3, 19, :_reduce_5,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 18, :_reduce_8,
  3, 18, :_reduce_9,
  3, 18, :_reduce_10,
  3, 18, :_reduce_11,
  3, 18, :_reduce_12,
  3, 18, :_reduce_13,
  4, 20, :_reduce_14,
  3, 22, :_reduce_15,
  1, 22, :_reduce_16,
  1, 21, :_reduce_17,
  1, 21, :_reduce_18,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  2, 25, :_reduce_22,
  1, 25, :_reduce_23,
  1, 24, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 39

racc_token_table = {
  false => 0,
  :error => 1,
  :MULDIV => 2,
  :PLUSMIN => 3,
  :IN => 4,
  :CMP => 5,
  :AND => 6,
  :OR => 7,
  "(" => 8,
  ")" => 9,
  :IDENTIFIER => 10,
  "," => 11,
  :STRING => 12,
  :NUMBER => 13,
  :BOOLEAN => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MULDIV",
  "PLUSMIN",
  "IN",
  "CMP",
  "AND",
  "OR",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "\",\"",
  "STRING",
  "NUMBER",
  "BOOLEAN",
  "$start",
  "none_or_expr",
  "expr",
  "infix_funcall",
  "primary",
  "prefix_funcall",
  "value",
  "operands",
  "literal",
  "boolean",
  "number" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cql_parser.y', 15)
  def _reduce_2(val, _values, result)
     return true 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'cql_parser.y', 21)
  def _reduce_5(val, _values, result)
     return val[1] 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'cql_parser.y', 26)
  def _reduce_8(val, _values, result)
     return [:or, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 27)
  def _reduce_9(val, _values, result)
     return [:and, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 28)
  def _reduce_10(val, _values, result)
     return [to_func(val[1]), val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 29)
  def _reduce_11(val, _values, result)
     return [to_func(val[1]), val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 30)
  def _reduce_12(val, _values, result)
     return [to_func(val[1]), val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 31)
  def _reduce_13(val, _values, result)
     return [to_func(val[1]), val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 34)
  def _reduce_14(val, _values, result)
     return [to_func(val[0]), *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 37)
  def _reduce_15(val, _values, result)
     return [val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 38)
  def _reduce_16(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 41)
  def _reduce_17(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 42)
  def _reduce_18(val, _values, result)
     return val[0].to_sym 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'cql_parser.y', 48)
  def _reduce_22(val, _values, result)
     return (val[0] == '+' ? val[1].to_f : -val[1].to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 49)
  def _reduce_23(val, _values, result)
     return val[0].to_f 
    result
  end
.,.,

module_eval(<<'.,.,', 'cql_parser.y', 52)
  def _reduce_24(val, _values, result)
     return val[0].downcase == "true" 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CQLParser
