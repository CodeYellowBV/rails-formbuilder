#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "cql_parser.y".
#

require 'racc/parser'


class CQLParser < Racc::Parser

module_eval <<'..end cql_parser.y modeval..id3c16e52c20', 'cql_parser.y', 57

def parse(str)
  @str = str.strip

  do_parse()
end

def next_token
  if @str.size > 0
    case @str
    when /^\d+(\.\d+)?/
      ret = [:NUMBER, $&]
    when /^[+-]/
      ret = [:PLUSMIN, $&]
    when /^[*\/]/
      ret = [:MULDIV, $&]
    when /^and\b/i
      ret = [:AND, $&]
    when /^or\b/i
      ret = [:OR, $&]
    when /^(not\s+)?in\b/i
      ret = [:IN, $&]
    when /^(true|false)\b/i
      ret = [:BOOLEAN, $&]
    when /^(><|<>|!=)/
      ret = [:CMP, "!="]
    when /^(<=|>=|=|<|>)/
      ret = [:CMP, $&]
    when /^"([^"]+)"/
      ret =[:STRING, $1]
    when /^[a-zA-Z_][a-zA-Z_0-9]*/
      ret = [:IDENTIFIER, $&]
    when /^[(,)]/
      ret = [$&, $&]
    else
      raise "Unrecognised symbol in string: #{@str.inspect}"
    end
    @str = $'
    @str.lstrip!
  else
    ret = [false, '$end']
  end
  return ret
end

def to_func(name)
  name.sub!(/\s+/, '_')
  name.downcase!
  if CQL::Procedures.instance_methods.include?(name)
    name.to_sym
  else
    raise TypeError.new("Unknown procedure '#{name}'")
  end
end

def on_error(token_id, error_value, value_stack)
  raise TypeError.new("Unexpected '#{error_value}' after '#{value_stack.reverse[0..5].reverse}'")
end
..end cql_parser.y modeval..id3c16e52c20

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 16, :_reduce_none,
 0, 16, :_reduce_2,
 1, 17, :_reduce_none,
 1, 17, :_reduce_none,
 3, 19, :_reduce_5,
 1, 19, :_reduce_none,
 1, 19, :_reduce_none,
 3, 18, :_reduce_8,
 3, 18, :_reduce_9,
 3, 18, :_reduce_10,
 3, 18, :_reduce_11,
 3, 18, :_reduce_12,
 3, 18, :_reduce_13,
 4, 20, :_reduce_14,
 3, 22, :_reduce_15,
 1, 22, :_reduce_16,
 1, 21, :_reduce_17,
 1, 21, :_reduce_18,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 1, 23, :_reduce_none,
 2, 25, :_reduce_22,
 1, 25, :_reduce_23,
 1, 24, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 39

racc_action_table = [
     6,    18,    19,    20,    21,    11,    26,    14,     6,     1,
     3,     5,    18,    11,    17,    14,     6,     1,     3,     5,
    36,    11,    25,    14,     6,     1,     3,     5,    16,    11,
   nil,    14,     6,     1,     3,     5,   nil,    11,   nil,    14,
     6,     1,     3,     5,   nil,    11,   nil,    14,     6,     1,
     3,     5,   nil,    11,   nil,    14,     6,     1,     3,     5,
   nil,    11,   nil,    14,     6,     1,     3,     5,   nil,    11,
   nil,    14,     6,     1,     3,     5,   nil,    11,   nil,    14,
   nil,     1,     3,     5,    18,    19,    20,    21,    22,    23,
    18,    19,   -25,    37,    18,    19,    20,    21,    22,    23,
   nil,    33,    18,    19,    20,    21,    22,    23,    18,    19,
    20,    21,    22,    18,    19,    20,   -25 ]

racc_action_check = [
     0,    31,    31,    31,    31,     0,    17,     0,    37,     0,
     0,     0,    28,    37,     8,    37,    25,    37,    37,    37,
    34,    25,    14,    25,    23,    25,    25,    25,     6,    23,
   nil,    23,    11,    23,    23,    23,   nil,    11,   nil,    11,
    20,    11,    11,    11,   nil,    20,   nil,    20,    21,    20,
    20,    20,   nil,    21,   nil,    21,    18,    21,    21,    21,
   nil,    18,   nil,    18,    19,    18,    18,    18,   nil,    19,
   nil,    19,    22,    19,    19,    19,   nil,    22,   nil,    22,
   nil,    22,    22,    22,    35,    35,    35,    35,    35,    35,
    29,    29,    29,    35,    24,    24,    24,    24,    24,    24,
   nil,    24,     9,     9,     9,     9,     9,     9,    32,    32,
    32,    32,    32,    30,    30,    30,    30 ]

racc_action_pointer = [
    -3,   nil,   nil,   nil,   nil,   nil,    15,   nil,    14,   100,
   nil,    29,   nil,   nil,    14,   nil,   nil,     6,    53,    61,
    37,    45,    69,    21,    92,    13,   nil,   nil,    10,    88,
   111,    -1,   106,   nil,    11,    82,   nil,     5,   nil ]

racc_action_default = [
    -2,   -21,   -17,   -23,   -19,   -24,   -25,   -20,   -25,    -1,
    -3,   -25,    -4,    -6,   -18,    -7,   -22,   -25,   -25,   -25,
   -25,   -25,   -25,   -25,   -25,   -25,    39,   -13,   -12,   -10,
   -11,    -9,    -8,    -5,   -25,   -16,   -14,   -25,   -15 ]

racc_goto_table = [
     9,    34,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,   nil,    38,   nil,   nil,   nil,   nil,    27,    28,
    29,    30,    31,    32 ]

racc_goto_check = [
     2,     7,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     7,   nil,   nil,   nil,   nil,     2,     2,
     2,     2,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,   nil,   nil,   nil,   -24,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,    35,    10,    12,    13,    15,   nil,     2,     4,
     7 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :MULDIV => 2,
 :PLUSMIN => 3,
 :IN => 4,
 :CMP => 5,
 :AND => 6,
 :OR => 7,
 "(" => 8,
 ")" => 9,
 :IDENTIFIER => 10,
 "," => 11,
 :STRING => 12,
 :NUMBER => 13,
 :BOOLEAN => 14 }

racc_use_result_var = true

racc_nt_base = 15

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'MULDIV',
'PLUSMIN',
'IN',
'CMP',
'AND',
'OR',
'"("',
'")"',
'IDENTIFIER',
'","',
'STRING',
'NUMBER',
'BOOLEAN',
'$start',
'none_or_expr',
'expr',
'infix_funcall',
'primary',
'prefix_funcall',
'value',
'operands',
'literal',
'boolean',
'number']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'cql_parser.y', 15
  def _reduce_2( val, _values, result )
 return true
   result
  end
.,.,

 # reduce 3 omitted

 # reduce 4 omitted

module_eval <<'.,.,', 'cql_parser.y', 21
  def _reduce_5( val, _values, result )
 return val[1]
   result
  end
.,.,

 # reduce 6 omitted

 # reduce 7 omitted

module_eval <<'.,.,', 'cql_parser.y', 26
  def _reduce_8( val, _values, result )
 return [:or, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 27
  def _reduce_9( val, _values, result )
 return [:and, val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 28
  def _reduce_10( val, _values, result )
 return [to_func(val[1]), val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 29
  def _reduce_11( val, _values, result )
 return [to_func(val[1]), val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 30
  def _reduce_12( val, _values, result )
 return [to_func(val[1]), val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 31
  def _reduce_13( val, _values, result )
 return [to_func(val[1]), val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 34
  def _reduce_14( val, _values, result )
 return [to_func(val[0]), *val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 37
  def _reduce_15( val, _values, result )
 return [val[0], *val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 38
  def _reduce_16( val, _values, result )
 return [val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 41
  def _reduce_17( val, _values, result )
 return val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 42
  def _reduce_18( val, _values, result )
 return val[0].to_sym
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

module_eval <<'.,.,', 'cql_parser.y', 48
  def _reduce_22( val, _values, result )
 return (val[0] == '+' ? val[1].to_f : -val[1].to_f)
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 49
  def _reduce_23( val, _values, result )
 return val[0].to_f
   result
  end
.,.,

module_eval <<'.,.,', 'cql_parser.y', 52
  def _reduce_24( val, _values, result )
 return val[0].downcase == "true"
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class CQLParser
